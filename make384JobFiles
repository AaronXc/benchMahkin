#!/usr/bin/env python3

import subprocess
import re
import os
import sys
"""
to do:

figure out how to save the results -check

store all of the jobs that are needed -check

write a job file global section -check

add the parts of the job file incrementally
"""
noAlternating=[	
    "/dev/1-1", 
			 
	"/dev/1-2", 
			 
	"/dev/1-3", 
			 
	"/dev/1-4", 
			 
	"/dev/1-5", 
			 
	"/dev/1-6", 
			 
	"/dev/1-7", 
			 
	"/dev/1-8",
        
    "/dev/1-9",
			 
	"/dev/1-10", 
			 
	"/dev/1-11",
			 
	"/dev/1-12",
			 
	"/dev/1-13",
			 
	"/dev/1-14",
			 
	"/dev/1-15",
			 
	"/dev/1-16",
			 
	"/dev/2-1",
			 
	"/dev/2-2", 
			 
	"/dev/2-3", 
			 
	"/dev/2-4", 
			 
	"/dev/2-5", 
			 
	"/dev/2-6", 
			 
	"/dev/2-7", 
			 
	"/dev/2-8", 
    
    "/dev/2-9",
			 
	"/dev/2-10", 
			 
	"/dev/2-11",
			 
	"/dev/2-12",
			 
	"/dev/2-13",
			 
	"/dev/2-14",
			 
	"/dev/2-15",
			 
	"/dev/2-16"]

alternatingPorts=[	
    
    "/dev/1-1", 
 			 
	"/dev/1-5", 
			 
	"/dev/1-9", 
			 
	"/dev/1-13",  
			 
	"/dev/1-2", 
			 
	"/dev/1-6",
			 
	"/dev/1-10",
			 
	"/dev/1-14",
			 
	"/dev/1-3", 
	
	"/dev/1-7", 
			 
	"/dev/1-11", 
    
	"/dev/1-15", 
    
    "/dev/1-8",

    "/dev/1-4",
	
    "/dev/1-12",
			 
	"/dev/1-16", 
	
	"/dev/2-1", 
 			 
	"/dev/2-5", 
			 
	"/dev/2-9", 
			 
	"/dev/2-13",  
			 
	"/dev/2-2", 
			 
	"/dev/2-6",
			 
	"/dev/2-10",
			 
	"/dev/2-14",
			 
	"/dev/2-3", 
	
	"/dev/2-7", 
			 
	"/dev/2-11", 
    
	"/dev/2-15", 
    
    "/dev/2-8",

    "/dev/2-4",
	
    "/dev/2-12",
			 
	"/dev/2-16"
	]
    
alternatingPortsAndCards=[	
    
    "/dev/1-1", 
			 
	"/dev/2-1", 
			 
	"/dev/1-5", 
			 
	"/dev/2-5", 
			 
	"/dev/1-9", 
			 
	"/dev/2-9", 
			 
	"/dev/1-13", 
			 
	"/dev/2-13", 
			 
	"/dev/1-2", 
			 
	"/dev/2-2",
			 
	"/dev/1-6",

	"/dev/2-6", 
			 
	"/dev/1-10",
			 
	"/dev/2-10",
			 
	"/dev/1-14",
	
	"/dev/2-14",
			 
	"/dev/1-3", 

	"/dev/2-3",
			 
	"/dev/1-7", 
	
	"/dev/2-7", 
			 		 
	"/dev/1-11", 
			 
	"/dev/2-11", 
	
    "/dev/1-15",
    
	"/dev/2-15", 
    
    "/dev/1-8",
			 
	"/dev/2-8", 

    "/dev/1-4",
    
	"/dev/2-4", 
	
    "/dev/1-12",
	
    "/dev/2-12",
			 
	"/dev/1-16",
			 
	"/dev/2-16"]
    
alternatingCards=[	
    
    "/dev/1-1", 

	"/dev/2-1",
			 
	"/dev/1-2", 
	
	"/dev/2-2",
			 
	"/dev/1-3", 
			 
	"/dev/2-3", 
			 
	"/dev/1-4", 
	
	"/dev/2-4",
			 
	"/dev/1-5", 
	
	"/dev/2-5", 
			 
	"/dev/1-6", 
	
	"/dev/2-6", 
			 
	"/dev/1-7", 
	
	"/dev/2-7",
			 
	"/dev/1-8", 
	
	"/dev/2-8",
    
    "/dev/1-9", 
	
	"/dev/2-9",
			 
	"/dev/1-10", 
	
	"/dev/2-10",
			 
	"/dev/1-11",
	
	"/dev/2-11",
			 
	"/dev/1-12",
	
	"/dev/2-12",
			 
	"/dev/1-13",
	
	"/dev/2-13",
			 
	"/dev/1-14",
	
	"/dev/2-14",
			 
	"/dev/1-15",
	
	"/dev/2-15",
			 
	"/dev/1-16",
	
	"/dev/2-16"]
    
driveOrders=[noAlternating, alternatingPorts, alternatingCards, alternatingPortsAndCards]

directoryNames=[
                "read_noAlt", "read_altPorts", "read_altCards", "read_altPortsAndCards",
                "randwrite_noAlt", "randwrite_altPorts", "randwrite_altCards", "randwrite_altPortsAndCards",
                "randrw_noAlt", "randrw_altPorts", "randrw_altCards", "randrw_altPortsAndCards"
                ]
	
globalSection = "[global]\n \
			name=name\n \
			filesize=16g\n\
			bs=1M\n\
			ioengine=libaio\n\
			readwrite=read\n\
            iodepth=32\n\
            direct=1\n\
			numjobs=1\n\
			group_reporting\n"
				
globalSection2 = "[global]\n\
			name=name\n\
			filesize=4g\n\
			bs=4k\n\
			ioengine=libaio\n\
			readwrite=write\n\
            iodepth=32\n\
            direct=1\n\
			numjobs=1\n\
			group_reporting\n"
           
globalSection3 = "[global]\n \
			name=name\n \
			filesize=8g\n\
			bs=64k\n\
			ioengine=libaio\n\
			readwrite=randrw\n\
            iodepth=32\n\
            direct=1\n\
			numjobs=1\n\
			group_reporting\n"
            
globalSections= [globalSection, globalSection2, globalSection3]

drivesPerJob=2
    
#   create the directory for each test
#   make the job files for each test in that directory
#   make a job file for every job in range 1:len(driveOrder)
#   run all the job files in a bash script
#   using the bash script, run a test to make the tab separated file for EXCEL plotting
   
def main(): 

    fioCommands = "./allCommands"
    f=open(fioCommands, "w+")
    f.write("#!/usr/bin/bash\n")
    f.close()
    
    for section in globalSections:
        for driveOrder in driveOrders:
        
            directoryNameIndex = ((driveOrders.index(driveOrder)+1)+len(driveOrders)*globalSections.index(section))-1
            if not os.path.exists("./"+directoryNames[directoryNameIndex]):                                 # make the directory for the test
                os.mkdir("./"+directoryNames[directoryNameIndex])
            
            jobs=int(len(driveOrder)/drivesPerJob)
            for i in range(1,len(driveOrder)+1):
                jobFile = "./"+directoryNames[directoryNameIndex]+"/FioTest"+str(i)
                f=open(jobFile, "w+")
                f.write(section)	
                f.close()
                
                for k in range(0, int(i/drivesPerJob)):
                #fill all the jobs
                    f=open(jobFile, "a+")
                    f.write("[job"+str(k+1)+"]\n")
                    f.close()
                    for l in range(0, drivesPerJob): 
                        f=open(jobFile, "a+")
                        f.write("filename="+driveOrder[l+(k)*drivesPerJob]+"\n")
                        f.close() 
                if i%drivesPerJob == 0:
                    pass
                else:
                    f=open(jobFile, "a+")
                    f.write("[job"+str(int(i/drivesPerJob)+1)+"]\n")
                    f.close()
                    f=open(jobFile, "a+")
                    for j in range(1, int(i%drivesPerJob+1)): 
                        f.write("filename="+driveOrder[int(i/drivesPerJob)*drivesPerJob+j-1]+"\n")
                    f.close() 
                    
                outputFile="./"+directoryNames[directoryNameIndex]+"/"+str(i)
                f=open(fioCommands, "a+")
                f.write("fio "+jobFile+" --output="+outputFile+"\n")
                f.close()
            #create the command to run fioTest_N and put the results in N
            #subprocess.run(["fio", "./"+directoryNames[directoryNameIndex]+"/FioTest", "--output="+outputFile], universal_newlines=True)   

if __name__ == "__main__":
        main()