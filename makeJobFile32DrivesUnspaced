#!/usr/bin/env python3

import subprocess
import re
import os
import sys
"""
to do:

figure out how to save the results -check

store all of the jobs that are needed -check

write a job file global section -check

add the parts of the job file incrementally
"""
noAlternating=[	
    "/dev/1-1", 
			 
	"/dev/1-2", 
			 
	"/dev/1-3", 
			 
	"/dev/1-4", 
			 
	"/dev/1-5", 
			 
	"/dev/1-6", 
			 
	"/dev/1-7", 
			 
	"/dev/1-8",
        
    "/dev/1-9",
			 
	"/dev/1-10", 
			 
	"/dev/1-11",
			 
	"/dev/1-12",
			 
	"/dev/1-13",
			 
	"/dev/1-14",
			 
	"/dev/1-15",
			 
	"/dev/1-16",
			 
	"/dev/2-1",
			 
	"/dev/2-2", 
			 
	"/dev/2-3", 
			 
	"/dev/2-4", 
			 
	"/dev/2-5", 
			 
	"/dev/2-6", 
			 
	"/dev/2-7", 
			 
	"/dev/2-8", 
    
    "/dev/2-9",
			 
	"/dev/2-10", 
			 
	"/dev/2-11",
			 
	"/dev/2-12",
			 
	"/dev/2-13",
			 
	"/dev/2-14",
			 
	"/dev/2-15",
			 
	"/dev/2-16"]

alternatingPorts=[	
    
    "/dev/1-1", 
 			 
	"/dev/1-5", 
			 
	"/dev/1-9", 
			 
	"/dev/1-13",  
			 
	"/dev/1-2", 
			 
	"/dev/1-6",
			 
	"/dev/1-10",
			 
	"/dev/1-14",
			 
	"/dev/1-3", 
	
	"/dev/1-7", 
			 
	"/dev/1-11", 
    
	"/dev/1-15", 
    
    "/dev/1-8",

    "/dev/1-4",
	
    "/dev/1-12",
			 
	"/dev/1-16", 
	
	"/dev/2-1", 
 			 
	"/dev/2-5", 
			 
	"/dev/2-9", 
			 
	"/dev/2-13",  
			 
	"/dev/2-2", 
			 
	"/dev/2-6",
			 
	"/dev/2-10",
			 
	"/dev/2-14",
			 
	"/dev/2-3", 
	
	"/dev/2-7", 
			 
	"/dev/2-11", 
    
	"/dev/2-15", 
    
    "/dev/2-8",

    "/dev/2-4",
	
    "/dev/2-12",
			 
	"/dev/2-16"
	]
    
alternatingPortsAndCards=[	
    
    "/dev/1-1", 
			 
	"/dev/2-1", 
			 
	"/dev/1-5", 
			 
	"/dev/2-5", 
			 
	"/dev/1-9", 
			 
	"/dev/2-9", 
			 
	"/dev/1-13", 
			 
	"/dev/2-13", 
			 
	"/dev/1-2", 
			 
	"/dev/2-2",
			 
	"/dev/1-6",

	"/dev/2-6", 
			 
	"/dev/1-10",
			 
	"/dev/2-10",
			 
	"/dev/1-14",
	
	"/dev/2-14",
			 
	"/dev/1-3", 

	"/dev/2-3",
			 
	"/dev/1-7", 
	
	"/dev/2-7", 
			 		 
	"/dev/1-11", 
			 
	"/dev/2-11", 
	
    "/dev/1-15",
    
	"/dev/2-15", 
    
    "/dev/1-8",
			 
	"/dev/2-8", 

    "/dev/1-4",
    
	"/dev/2-4", 
	
    "/dev/1-12",
	
    "/dev/2-12",
			 
	"/dev/1-16",
			 
	"/dev/2-16"]
    
alternatingCards=[	
    
    "/dev/1-1", 

	"/dev/2-1",
			 
	"/dev/1-2", 
	
	"/dev/2-2",
			 
	"/dev/1-3", 
			 
	"/dev/2-3", 
			 
	"/dev/1-4", 
	
	"/dev/2-4",
			 
	"/dev/1-5", 
	
	"/dev/2-5", 
			 
	"/dev/1-6", 
	
	"/dev/2-6", 
			 
	"/dev/1-7", 
	
	"/dev/2-7",
			 
	"/dev/1-8", 
	
	"/dev/2-8",
    
    "/dev/1-9", 
	
	"/dev/2-9",
			 
	"/dev/1-10", 
	
	"/dev/2-10",
			 
	"/dev/1-11",
	
	"/dev/2-11",
			 
	"/dev/1-12",
	
	"/dev/2-12",
			 
	"/dev/1-13",
	
	"/dev/2-13",
			 
	"/dev/1-14",
	
	"/dev/2-14",
			 
	"/dev/1-15",
	
	"/dev/2-15",
			 
	"/dev/1-16",
	
	"/dev/2-16"]
    
driveOrders=[noAlternating, alternatingPorts, alternatingCards, alternatingPortsAndCards]

directoryNames=[
                "read_noAlt", "read_altPorts", "read_altCards", "read_altPortsAndCards",
                "randwrite_noAlt", "randwrite_altPorts", "randwrite_altCards", "randwrite_altPortsAndCards",
                "randrw_noAlt", "randrw_altPorts", "randrw_altCards", "randrw_altPortsAndCards"
                ]
	
globalSection = "[global]\n \
			name=name\n \
			filesize=16g\n\
			bs=1M\n\
			ioengine=libaio\n\
			readwrite=read\n\
			numjobs=1\n\
			group_reporting\n"
				
globalSection2 = "[global]\n \
			name=name\n \
			filesize=4g\n\
			bs=4k\n\
			ioengine=libaio\n\
			readwrite=randwrite\n\
			numjobs=1\n\
			group_reporting\n"
           
globalSection3 = "[global]\n \
			name=name\n \
			filesize=8g\n\
			bs=64k\n\
			ioengine=libaio\n\
			readwrite=randrw\n\
			numjobs=1\n\
			group_reporting\n"
            
globalSections= [globalSection, globalSection2, globalSection3]

coresPerDrive=1

def checkUnits(regex):
    IOPS=regex.group(1)
    BW=regex.group(3)
    if regex.group(2) != None:
        print(regex.group(2))
        if regex.group(2) == "k":   
            IOPS=float(IOPS)
            IOPS*=1000
            str(IOPS)
        elif regex.group(2) == "M":
            IOPS=float(IOPS)
            IOPS*=1000000
            str(IOPS)
    if regex.group(4) != None:
        print(regex.group(4))
        if regex.group(4) == "MiB/s":
            pass
        elif regex.group(4) == "KiB/s":
            BW=float(BW)
            BW=float(BW)
            BW/=1000
            str(BW)
        elif regex.group(4) == "GiB/s":
            BW=float(BW)
            BW*=1000
            str(BW)
    return IOPS, BW
    
#   create the directory for each test
#   make the job files for each test in that directory
#   make a job file for every job in range 1:len(driveOrder)
#   run all the job files in a bash script
#   using the bash script, run a test to make the tab separated file for EXCEL plotting
   
def main():     
    for section in globalSections:
        for driveOrder in driveOrders:
        
            directoryNameIndex = (globalSections.index(section)+1)*(driveOrders.index(driveOrder)+1)-1
            if not os.path.exists("./"+directoryNames[directoryNameIndex]):
                os.mkdir("./"+directoryNames[directoryNameIndex])
           

           if not os.path.exists("./"+directoryNames[directoryNameIndex]):
                os.mkdir("./"+directoryNames[directoryNameIndex])
                
            f=open("./"+directoryNames[directoryNameIndex]+"/FioTest", "w+")
            #change the above line to start a new fio test 12 times in this double-loop thingy we're in right now
            f.write(section)	
            f.close()
            
            f=open("./"+directoryNames[directoryNameIndex]+"/FioTest", "a+")
            for i in range(1,len(driveOrder)):
                stringI=str(i)
                outputFile="./"+directoryNames[directoryNameIndex]+"/"+stringI
                f.write("[job"+stringI+"]\n")
                for j in range(1,(coresPerDrive+1)):
                    f.write("filename="+driveOrder[i-1]+"\n")
                    
            f.close()
            #subprocess.run(["fio", "./"+directoryNames[directoryNameIndex]+"/FioTest", "--output="+outputFile], universal_newlines=True)   
#########################################################################################################################################################################
# make this section a second python script
            f2=open("./"+directoryNames[directoryNameIndex]+"/BenchMKresults", "w+")
            ############## overwrite previous test results
            f2.write("DefaultName\n")
            f2.close()      
            ############## 
            for i in range(1,33):
                fname=str(int(i))
                if os.path.exists("./"+directoryNames[directoryNameIndex]+"/"+fname):
                    f=open("./"+directoryNames[directoryNameIndex]+"/"+fname, 'r+')
                    performanceData=f.readlines()
                    f.close()
                    f2=open("./"+directoryNames[directoryNameIndex]+"/BenchMKresults", "a+")
                    for line in performanceData:
                        read_performance = re.search("read:\s+IOPS=(\d+\.*\d+)(.*),\s+BW=(\d+\.*\d+)(\S+)\s+.*$", line)
                        if read_performance != None:
                            #deal with units
                            IOPS, BW = checkUnits(read_performance)    
                            f2.write("{n}   {io}    {bw}\n".format(n=i, io=IOPS, bw=BW))
                        write_performance = re.search("write:\s+IOPS=(\d+\.*\d+)(.*),\s+BW=(\d+\.*\d+)(\S+)\s+.*$", line)
                        if write_performance != None:
                            #deal with units
                            IOPS, BW = checkUnits(read_performance) 
                            f2.write("{n}   {io}    {bw}\n".format(n=i, io=IOPS, bw=BW))
                    f2.close()    
###########################################################################################################################################################################   
if __name__ == "__main__":
        main()