#!/usr/bin/env python3

import subprocess
import re
import os
import sys
import json
from benchMKscriptVars import noAlternating, alternatingPorts, alternatingPortsAndCards, alternatingCards, directoryNames, globalSection, globalSection2, globalSection3, globalSections, driveOrders

def checkUnits(regex):
    IOPS=regex.group(1)
    BW=regex.group(3)
    if regex.group(2) != None:
        print(regex.group(2))
        if regex.group(2) == "k":   
            IOPS=float(IOPS)
            IOPS*=1000
            str(IOPS)
        elif regex.group(2) == "M":
            IOPS=float(IOPS)
            IOPS*=1000000
            str(IOPS)
    if regex.group(4) != None:
        print(regex.group(4))
        if regex.group(4) == "MiB/s":
            pass
        elif regex.group(4) == "KiB/s":
            BW=float(BW)
            BW=float(BW)
            BW/=1000
            str(BW)
        elif regex.group(4) == "GiB/s":
            BW=float(BW)
            BW*=1000
            str(BW)
    return IOPS, BW

#########################################################################################################################################################################
	
def main():
    #dict for json
    testJS={}
    
    if os.path.exists("/root/benchmarking/BenchMKresults"):
        pass
    else:
        os.mkdir("/root/benchmarking/BenchMKresults")
        
    for section in globalSections:
        for driveOrder in driveOrders:
            directoryNameIndex = driveOrders.index(driveOrder)+len(driveOrders)*globalSections.index(section)
            if not os.path.exists("./"+directoryNames[directoryNameIndex]):                                 # make sure the directory for the test exists
                sys.exit("no directory... something went wrong")#panic
            
            if os.path.exists("/root/benchmarking/BenchMKresults/BenchMKresults_"+directoryNames[directoryNameIndex]):
                subprocess.run(["rm", "-r", "/root/benchmarking/BenchMKresults/BenchMKresults_"+directoryNames[directoryNameIndex]], universal_newlines=True)
                
            os.mkdir("/root/benchmarking/BenchMKresults/BenchMKresults_"+directoryNames[directoryNameIndex])             

            testJS[directoryNames[directoryNameIndex]]={}
            testJS[directoryNames[directoryNameIndex]]["reads"]={}
            testJS[directoryNames[directoryNameIndex]]["writes"]={}
            testJS[directoryNames[directoryNameIndex]]["reads"]["bw"]={}
            testJS[directoryNames[directoryNameIndex]]["reads"]["iops"]={}
            testJS[directoryNames[directoryNameIndex]]["writes"]["bw"]={}
            testJS[directoryNames[directoryNameIndex]]["writes"]["iops"]={}
            testJS[directoryNames[directoryNameIndex]]["hardware"]=None
            
            
            for i in range(1,len(driveOrder)+1):
                fname=str(int(i))
                if os.path.exists("./"+directoryNames[directoryNameIndex]+"/"+fname):
                    f=open("./"+directoryNames[directoryNameIndex]+"/"+fname, 'r+')
                    performanceData=f.readlines()
                    f.close()
                    
                    for line in performanceData:
                        read_performance = re.search("read:\s+IOPS=(\d+\.*\d+)(.*),\s+BW=(\d+\.*\d+)(\S+)\s+.*$", line)
                        if read_performance != None:
                            
                            f=open("/root/benchmarking/BenchMKresults/BenchMKresults_"+directoryNames[directoryNameIndex]+"/reads", "a+")
                            #deal with units
                            IOPS, BW = checkUnits(read_performance)    
                            f.write("{n}    {io}    {bw}\n".format(n=i, io=IOPS, bw=BW))
                            f.close()
                            testJS[directoryNames[directoryNameIndex]]["reads"]["bw"][i]=BW
                            testJS[directoryNames[directoryNameIndex]]["reads"]["iops"][i]=IOPS
                        write_performance = re.search("write:\s+IOPS=(\d+\.*\d+)(.*),\s+BW=(\d+\.*\d+)(\S+)\s+.*$", line)
                        if write_performance != None:
                            f=open("/root/benchmarking/BenchMKresults/BenchMKresults_"+directoryNames[directoryNameIndex]+"/writes", "a+")
                            #deal with units
                            IOPS, BW = checkUnits(write_performance) 
                            f.write("{n}   {io}    {bw}\n".format(n=i, io=IOPS, bw=BW))
                            f.close()
                            testJS[directoryNames[directoryNameIndex]]["writes"]["bw"][i]=BW
                            testJS[directoryNames[directoryNameIndex]]["writes"]["iops"][i]=IOPS
                    f.close()   
        
    f=open("/root/benchmarking/BenchMKresults/allResults.json", "w+")     
    json.dump(testJS, f)
    f.close()

    f=open("/root/benchmarking/BenchMKresults/hardware", "w+")
    
    hardware=subprocess.Popen(["dmidecode", "-t", "2"], stdout=subprocess.PIPE, universal_newlines=True).stdout
    mobo_string=None
    if hardware != None:
        for line in hardware:
            mobo = re.search("Product Name:\s+(.+)$", line)
            if mobo != None:
                mobo_string=mobo.group(1).replace(" ", "_")
                mobo_string=mobo_string+"_"
                f.write(mobo_string+"_")
                
    hardware=subprocess.Popen(["dmidecode", "-t", "4"], stdout=subprocess.PIPE, universal_newlines=True).stdout
    cpu_string=None
    if hardware != None:
        for line in hardware:
            cpu = re.search("^\tVersion:\s+(.+)$", line)
            if cpu != None:
                cpu = cpu.group(1).replace(" ", "_")
                cpu_string = re.sub("_@_.*", "", cpu )
                cpu_string+="_"
                f.write(cpu_string)
        
    hardware=subprocess.Popen(["lspci"], stdout=subprocess.PIPE, universal_newlines=True).stdout
    hbas = [ "SAS3224", "SAS3316", "SAS3616", "SAS3008"]
    hba_string="_"
    if hardware != None:
        for line in hardware:
            for card in hbas:
                regex = re.search("^.*LSI\s+({c}).*$".format(c = card), line)
                if regex != None:
                    hba_string = regex.group(1)
    if hba_string == "_":
        hba_string="unidentifiedHBA"
    hba_string+="_"
    f.write(hba_string)
    

    hardware=subprocess.Popen(["dmidecode", "-t", "9"], stdout=subprocess.PIPE, universal_newlines=True).stdout
    allSlots_string=""
    if hardware != None:
        in_use = "_"
        slotInfo = {}
        slots=[]
        slotUsages=[]
        for line in hardware:
            slotLackingUsage  = re.search("^\tCurrent Usage: (Available)$", line)
            slotUsage  = re.search("^\tCurrent Usage: (In Use)$", line)
            
            slot = re.search("^\tDesignation:\s+(.*)$", line)
            if slot != None:
                slots.append(slot.group(1))
            if slotUsage != None:
                slotUsages.append(slotUsage.group(1).strip())
            if slotLackingUsage != None:
                slotUsages.append(slotLackingUsage.group(1).strip())
                
        for slot in slots:
            index = slots.index(slot)
            if index+1 < len(slotUsages) and slotUsages[index] != None:
                slotInfo[slot]=slotUsages[index]      
        possibleSlots = slotInfo.keys()
        for ps in possibleSlots:
            if slotInfo[ps] == "In Use":
                ps=ps.strip().replace(" ", "_")
                ps=ps.replace("_PCI-E_3.0_", "_")
                ps+="_"
                allSlots_string+=ps
                f.write(ps)
                
    hardware=subprocess.Popen(["dmidecode", "-t", "17"], stdout=subprocess.PIPE, universal_newlines=True).stdout
    allRAM_string=0
    if hardware != None:
        for line in hardware:
            RAM = re.search("^\s+Size:\s+(.*)", line)
            if RAM != None:
                if RAM.group(1) != "No Module Installed":
                    print(RAM.group(1))
                    RAM = re.sub("[a-zA-Z]+", "", RAM.group(1))
                    print(RAM)
                    RAM = RAM.strip()
                    RAM = int(RAM)
                    allRAM_string+=RAM
        allRAM_string=str(allRAM_string)
        allRAM_string="RAM="+allRAM_string
        f.write(allRAM_string)
                

    f.close()
    
    testJS[directoryNames[directoryNameIndex]]["hardware"]=mobo_string+cpu_string+hba_string+allSlots_string+allRAM_string
    
    f=open("/root/benchmarking/BenchMKresults/allResults.json", "w+")     
    json.dump(testJS, f)
    f.close()
    
if __name__ == "__main__":
    main()
###########################################################################################################################################################################   


